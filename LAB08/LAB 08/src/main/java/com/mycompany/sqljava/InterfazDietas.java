/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package com.mycompany.sqljava;

import com.formdev.flatlaf.FlatDarculaLaf;
import javax.swing.*;
import javax.swing.table.DefaultTableModel;
import java.awt.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.util.List;
/**
 *
 * @author wbbtester
 */
public class InterfazDietas extends javax.swing.JFrame {
    // int 1 = crear, 2 = editar, 3 = eliminar, 4 = reactivar, 5 = inactivar
    // default 0
    public static int flag = 0;
    // VALOR DEFAULT DE LA TABLA A MOSTRAR
    public static String tablaSelec = "Departamento";
    private String contextoActual = "TABLA_NORMAL"; 
    
    private DatailFrame panelDetalles;
    /**
     * Creates new form InterfazDietas
     */
    
    
    public InterfazDietas() {
        initComponents();
        this.setLocationRelativeTo(null);
        
        cargarTablasEnComboBox();
        CTabla tabla = new CTabla();
        initPanelDetalles();
        tabla.Mostrar(tablaQ,tablaSelec);
        CConexion conexion = new CConexion();
        conexion.estableceConexion();
        // Actualizar textos iniciales de botones
        actualizarTextosBotones();
       
    }
    
    private void initPanelDetalles() {
        try {
            panelDetalles = new DatailFrame();
            
            // Verificar que jDetails existe
            if (jDetails != null) {
                // Configurar el panel jDetails
                jDetails.setLayout(new BorderLayout());
                jDetails.removeAll(); // Limpiar contenido previo
                jDetails.add(panelDetalles, BorderLayout.CENTER);
                
                // Generar campos para la tabla inicial
                panelDetalles.generarCamposParaTabla(tablaSelec);
                panelDetalles.habilitarCampos(false, false); // Inicialmente deshabilitado
                
                // Forzar actualización
                jDetails.revalidate();
                jDetails.repaint();
                
                System.out.println("Panel de detalles inicializado correctamente");
            } else {
                System.err.println("ERROR: jDetails es null. Asegúrate de crear el JPanel jDetails en NetBeans Design");
                // Crear un panel temporal para evitar errores
                panelDetalles = new DatailFrame();
            }
        } catch (Exception e) {
            System.err.println("Error al inicializar panel de detalles: " + e.getMessage());
        }
    }
    
    private void cargarTablasEnComboBox() {
        try {
            CConexion conexion = new CConexion();
            List<String> tablas = conexion.obtenerTablas();
            
            // Limpiar ComboBox y agregar tablas
            jTablas.removeAllItems();
            for (String tabla : tablas) {
                jTablas.addItem(tabla);
            }
            
            // Establecer la primera tabla como seleccionada
            if (!tablas.isEmpty()) {
                tablaSelec = tablas.get(0);
                jTablas.setSelectedItem(tablaSelec);
            }
            
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, "Error al cargar tablas: " + e.getMessage());
        }
    }
    
    

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel2 = new javax.swing.JPanel();
        borrar = new javax.swing.JButton();
        crear = new javax.swing.JButton();
        modificar = new javax.swing.JButton();
        BtnCancel = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        jDetails = new javax.swing.JPanel();
        jPanelTabla = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tablaQ = new javax.swing.JTable();
        LTabla = new javax.swing.JLabel();
        jTablas = new javax.swing.JComboBox<>();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        borrar.setText("Eliminar");
        borrar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                borrarActionPerformed(evt);
            }
        });

        crear.setText("Adicionar");
        crear.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                crearActionPerformed(evt);
            }
        });

        modificar.setText("Modificar");
        modificar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                modificarActionPerformed(evt);
            }
        });

        BtnCancel.setText("Cancelar");
        BtnCancel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BtnCancelActionPerformed(evt);
            }
        });

        jLabel1.setText("Datos:");

        javax.swing.GroupLayout jDetailsLayout = new javax.swing.GroupLayout(jDetails);
        jDetails.setLayout(jDetailsLayout);
        jDetailsLayout.setHorizontalGroup(
            jDetailsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 318, Short.MAX_VALUE)
        );
        jDetailsLayout.setVerticalGroup(
            jDetailsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 133, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(crear)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(modificar)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(borrar, javax.swing.GroupLayout.PREFERRED_SIZE, 87, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(BtnCancel)
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addGap(0, 0, Short.MAX_VALUE))))
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(20, 20, 20)
                .addComponent(jDetails, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addComponent(jLabel1)
                .addGap(3, 3, 3)
                .addComponent(jDetails, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(modificar)
                    .addComponent(crear)
                    .addComponent(borrar)
                    .addComponent(BtnCancel))
                .addContainerGap(32, Short.MAX_VALUE))
        );

        tablaQ.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {},
                {},
                {},
                {}
            },
            new String [] {

            }
        ));
        tablaQ.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tablaQMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(tablaQ);

        javax.swing.GroupLayout jPanelTablaLayout = new javax.swing.GroupLayout(jPanelTabla);
        jPanelTabla.setLayout(jPanelTablaLayout);
        jPanelTablaLayout.setHorizontalGroup(
            jPanelTablaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanelTablaLayout.createSequentialGroup()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 336, Short.MAX_VALUE)
                .addContainerGap())
        );
        jPanelTablaLayout.setVerticalGroup(
            jPanelTablaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelTablaLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 193, Short.MAX_VALUE)
                .addContainerGap())
        );

        LTabla.setText("Tabla:");

        jTablas.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "departamento", "ingeniero", "ingeniero_proyecto", "proyecto" }));
        jTablas.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTablasActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(12, 12, 12)
                        .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(20, 20, 20)
                        .addComponent(LTabla)
                        .addGap(18, 18, 18)
                        .addComponent(jTablas, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jPanelTabla, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(29, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(8, 8, 8)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(LTabla)
                    .addComponent(jTablas, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanelTabla, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(21, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void borrarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_borrarActionPerformed
        try {
            // Si estamos en modo eliminar, confirmar eliminación
            if (flag == 3) {
                if (panelDetalles == null) {
                    JOptionPane.showMessageDialog(this, "Panel de detalles no disponible", "Error", JOptionPane.ERROR_MESSAGE);
                    return;
                }
                
                // Validar que hay un registro seleccionado
                int filaSeleccionada = tablaQ.getSelectedRow();
                if (filaSeleccionada < 0) {
                    JOptionPane.showMessageDialog(this, "Debe seleccionar un registro para eliminar", "Error", JOptionPane.WARNING_MESSAGE);
                    return;
                }
                
                // Ejecutar eliminación
                ejecutarEliminacion();
                
            } else {
                // Activar modo eliminar
                int filaSeleccionada = tablaQ.getSelectedRow();
                if (filaSeleccionada < 0) {
                    JOptionPane.showMessageDialog(this, "Debe seleccionar un registro para eliminar", "Aviso", JOptionPane.WARNING_MESSAGE);
                    return;
                }
                
                flag = 3;
                System.out.println("Modo: ELIMINAR activado");
                
                if (panelDetalles != null) {
                    // Cargar datos del registro seleccionado
                    cargarDatosEnPanelDetalles(filaSeleccionada);
                    
                    // Deshabilitar todos los campos
                    panelDetalles.habilitarCampos(false, false);
                    
                    // Mostrar confirmación
                    Object[] opciones = {"Confirmar Eliminación", "Cancelar"};
                    int confirmacion = JOptionPane.showOptionDialog(this,
                        "¿Está seguro de que desea eliminar este registro?\nEsta acción no se puede deshacer.",
                        "Confirmar Eliminación",
                        JOptionPane.YES_NO_OPTION,
                        JOptionPane.QUESTION_MESSAGE,
                        null,
                        opciones,
                        opciones[1]);
                    
                    if (confirmacion == 0) {
                        // Usuario confirmó, proceder con eliminación
                        JOptionPane.showMessageDialog(this, 
                            "Presione 'Confirmar Eliminación' nuevamente para ejecutar la eliminación.", 
                            "Eliminar Registro", 
                            JOptionPane.WARNING_MESSAGE);
                    } else {
                        // Usuario canceló
                        cancelarOperacion();
                        return;
                    }
                }
            }
        } catch (HeadlessException e) {
            JOptionPane.showMessageDialog(this, 
                "Error en operación eliminar: " + e.getMessage(), 
                "Error", 
                JOptionPane.ERROR_MESSAGE);
            flag = 0;
        }
        actualizarTextosBotones();
    }//GEN-LAST:event_borrarActionPerformed

    private void crearActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_crearActionPerformed
        if (flag == 1) {
            // Estamos en modo crear, ejecutar creación
            ejecutarCreacion();
        } else {
            // Activar modo crear
            flag = 1;
            System.out.println("Modo: CREAR activado");

            try {
                if (panelDetalles != null) {
                    panelDetalles.limpiarTodosLosCampos();
                    panelDetalles.habilitarCampos(true, true);
                    configurarCamposAutoIncrement();

                    JOptionPane.showMessageDialog(this,
                            "Modo CREAR activado.\nComplete los campos y presione 'Guardar Nuevo' para confirmar.",
                            "Crear Registro",
                            JOptionPane.INFORMATION_MESSAGE);
                }
            } catch (Exception e) {
                JOptionPane.showMessageDialog(this,
                        "Error al activar modo crear: " + e.getMessage(),
                        "Error",
                        JOptionPane.ERROR_MESSAGE);
            }
        }
        actualizarTextosBotones();

    }//GEN-LAST:event_crearActionPerformed

    private void tablaQMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tablaQMouseClicked
        if (evt.getClickCount() == 2) {
            int filaSeleccionada = tablaQ.getSelectedRow();
            if (filaSeleccionada >= 0 && tablaQ.getColumnCount() > 1) {
                
                try {
                    // Si estamos viendo la tabla Departamento, cargar proyectos
                    if (contextoActual.equals("TABLA_NORMAL") && tablaSelec.equalsIgnoreCase("Departamento")) {
                        Object valor = tablaQ.getValueAt(filaSeleccionada, 1);
                        if (valor != null) {
                            String nombreDepartamento = valor.toString();
                            cargarProyectosPorDepartamento(nombreDepartamento);
                        }
                    }
                    // Si estamos viendo proyectos o la tabla Proyecto, cargar ingenieros
                    else if ((contextoActual.equals("PROYECTOS_DEPTO") || 
                             (contextoActual.equals("TABLA_NORMAL") && tablaSelec.equalsIgnoreCase("Proyecto")))) {
                        Object valor = tablaQ.getValueAt(filaSeleccionada, 1);
                        if (valor != null) {
                            String nombreProyecto = valor.toString();
                            cargarIngenierosPorProyecto(nombreProyecto);
                        }
                    }
                } catch (Exception e) {
                    JOptionPane.showMessageDialog(this, "Error al obtener datos de la fila: " + e.getMessage());
                }
            }
        }
                // AGREGAR CÓDIGO PARA CLICK SIMPLE - CARGAR DATOS EN PANEL DETALLES
        if (evt.getClickCount() == 1) {
            int filaSeleccionada = tablaQ.getSelectedRow();
            if (filaSeleccionada >= 0) {
                try {
                    cargarDatosEnPanelDetalles(filaSeleccionada);
                } catch (Exception e) {
                    System.err.println("Error al cargar datos en panel detalles: " + e.getMessage());
                }
            }
        }
        
    }//GEN-LAST:event_tablaQMouseClicked

    private void modificarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_modificarActionPerformed
         try {
            // Si estamos en modo modificar, guardar cambios
            if (flag == 2) {
                if (panelDetalles == null) {
                    JOptionPane.showMessageDialog(this, "Panel de detalles no disponible", "Error", JOptionPane.ERROR_MESSAGE);
                    return;
                }
                
                // Validar que hay un registro seleccionado
                int filaSeleccionada = tablaQ.getSelectedRow();
                if (filaSeleccionada < 0) {
                    JOptionPane.showMessageDialog(this, "Debe seleccionar un registro para modificar", "Error", JOptionPane.WARNING_MESSAGE);
                    return;
                }
                
                // Ejecutar modificación
                ejecutarModificacion();
                
            } else {
                // Activar modo modificar
                int filaSeleccionada = tablaQ.getSelectedRow();
                if (filaSeleccionada < 0) {
                    JOptionPane.showMessageDialog(this, "Debe seleccionar un registro para modificar", "Aviso", JOptionPane.WARNING_MESSAGE);
                    return;
                }
                
                flag = 2;
                System.out.println("Modo: MODIFICAR activado");
                
                if (panelDetalles != null) {
                    // Cargar datos del registro seleccionado
                    cargarDatosEnPanelDetalles(filaSeleccionada);
                    
                    // Habilitar campos excepto PK y auto-increment
                    panelDetalles.habilitarCampos(true, false);
                    
                    JOptionPane.showMessageDialog(this, 
                        "Modo MODIFICAR activado.\nModifique los campos necesarios y presione 'Guardar Cambios' para confirmar.", 
                        "Modificar Registro", 
                        JOptionPane.INFORMATION_MESSAGE);
                }
            }
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, 
                "Error en operación modificar: " + e.getMessage(), 
                "Error", 
                JOptionPane.ERROR_MESSAGE);
            flag = 0;
        }
        actualizarTextosBotones();
    }//GEN-LAST:event_modificarActionPerformed

    private void BtnCancelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BtnCancelActionPerformed
        flag = 0;
        if (panelDetalles != null) {
            cancelarOperacion();

            panelDetalles.limpiarTodosLosCampos();
            panelDetalles.habilitarCampos(false, false);
        }
        
        // Si estamos en una vista especial, volver a la tabla normal
        if (!contextoActual.equals("TABLA_NORMAL")) {
            volverATablaOriginal();
        }
    }//GEN-LAST:event_BtnCancelActionPerformed

    private void jTablasActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTablasActionPerformed
    String tablaSeleccionada = (String) jTablas.getSelectedItem();
    if (tablaSeleccionada != null) {
        try {
            tablaSelec = tablaSeleccionada;
            
            // LIMPIAR TABLA COMPLETAMENTE
            DefaultTableModel modeloLimpio = new DefaultTableModel();
            tablaQ.setModel(modeloLimpio);
            tablaQ.setRowSorter(null);
            tablaQ.repaint();
            
            if (panelDetalles != null) {
                panelDetalles.generarCamposParaTabla(tablaSelec);
                panelDetalles.habilitarCampos(false, false);
            }
            
            // Dar tiempo para que se actualice la UI
            SwingUtilities.invokeLater(() -> {
                try {
                    CTabla tabla = new CTabla();
                    tabla.Mostrar(tablaQ, tablaSelec);
                    contextoActual = "TABLA_NORMAL";
                    LTabla.setText("Tabla:");
                    flag = 0;
                    System.out.println("Tabla cambiada a: " + tablaSelec);
                } catch (Exception e) {
                    JOptionPane.showMessageDialog(InterfazDietas.this, "Error al cambiar tabla: " + e.getMessage());
                }
            });
            
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, "Error al cambiar tabla: " + e.getMessage());
        }
    }
    }//GEN-LAST:event_jTablasActionPerformed

    private void cancelarOperacion() {
        flag = 0;
        System.out.println("Operación cancelada - Modo: NORMAL");

        try {
            if (panelDetalles != null) {
                panelDetalles.limpiarTodosLosCampos();
                panelDetalles.habilitarCampos(false, false);
            }

            // Si estamos en una vista especial, volver a la tabla normal
            if (!contextoActual.equals("TABLA_NORMAL")) {
                volverATablaOriginal();
            }

            // Deseleccionar fila en la tabla
            tablaQ.clearSelection();

        } catch (Exception e) {
            System.err.println("Error al cancelar operación: " + e.getMessage());
        }
    }    
    
    private void ejecutarCreacion() {
        try {
            if (!contextoActual.equals("TABLA_NORMAL")) {
                JOptionPane.showMessageDialog(this,
                        "Solo se puede crear registros en la vista normal de tabla",
                        "Error",
                        JOptionPane.WARNING_MESSAGE);
                return;
            }

            // Validar campos
            ValidationResult validacion = panelDetalles.validarTodosLosCampos(true);
            if (!validacion.esValido) {
                JOptionPane.showMessageDialog(this,
                        validacion.obtenerMensajeCompleto(),
                        "Errores de Validación",
                        JOptionPane.ERROR_MESSAGE);
                return;
            }

            // Obtener valores
            String[] valores = panelDetalles.obtenerTodosLosValores();
            List<CConexion.ColumnMetadata> metadatos = panelDetalles.getMetadatosTabla();

            // Insertar en base de datos
            CTabla tabla = new CTabla();
            boolean exito = tabla.InsertarConValidaciones(tablaSelec, metadatos, valores);

            if (exito) {
                JOptionPane.showMessageDialog(this,
                        "Registro creado exitosamente",
                        "Éxito",
                        JOptionPane.INFORMATION_MESSAGE);

                // Actualizar tabla y resetear estado
                tabla.Mostrar(tablaQ, tablaSelec);
                cancelarOperacion();
            }

        } catch (Exception e) {
            JOptionPane.showMessageDialog(this,
                    "Error al crear registro: " + e.getMessage(),
                    "Error",
                    JOptionPane.ERROR_MESSAGE);
        }
    }
    
    
    private void ejecutarModificacion() {
        try {
            if (!contextoActual.equals("TABLA_NORMAL")) {
                JOptionPane.showMessageDialog(this,
                        "Solo se puede modificar registros en la vista normal de tabla",
                        "Error",
                        JOptionPane.WARNING_MESSAGE);
                return;
            }

            // Validar campos
            ValidationResult validacion = panelDetalles.validarTodosLosCampos(false);
            if (!validacion.esValido) {
                JOptionPane.showMessageDialog(this,
                        validacion.obtenerMensajeCompleto(),
                        "Errores de Validación",
                        JOptionPane.ERROR_MESSAGE);
                return;
            }

            // Obtener valores
            String[] valores = panelDetalles.obtenerTodosLosValores();
            List<CConexion.ColumnMetadata> metadatos = panelDetalles.getMetadatosTabla();

            // Modificar en base de datos
            CTabla tabla = new CTabla();
            boolean exito = tabla.ModificarConValidaciones(tablaSelec, metadatos, valores);

            if (exito) {
                JOptionPane.showMessageDialog(this,
                        "Registro modificado exitosamente",
                        "Éxito",
                        JOptionPane.INFORMATION_MESSAGE);

                // Actualizar tabla y resetear estado
                tabla.Mostrar(tablaQ, tablaSelec);
                cancelarOperacion();
            }

        } catch (Exception e) {
            JOptionPane.showMessageDialog(this,
                    "Error al modificar registro: " + e.getMessage(),
                    "Error",
                    JOptionPane.ERROR_MESSAGE);
        }
    }
    
    
    private void ejecutarEliminacion() {
        try {
            if (!contextoActual.equals("TABLA_NORMAL")) {
                JOptionPane.showMessageDialog(this,
                        "Solo se puede eliminar registros en la vista normal de tabla",
                        "Error",
                        JOptionPane.WARNING_MESSAGE);
                return;
            }

            // Obtener ID del registro
            String[] valores = panelDetalles.obtenerTodosLosValores();
            List<CConexion.ColumnMetadata> metadatos = panelDetalles.getMetadatosTabla();

            String valorId = null;
            for (int i = 0; i < metadatos.size() && i < valores.length; i++) {
                if (metadatos.get(i).isPrimaryKey) {
                    valorId = valores[i];
                    break;
                }
            }

            if (valorId == null || valorId.trim().isEmpty()) {
                JOptionPane.showMessageDialog(this,
                        "No se pudo obtener el ID del registro",
                        "Error",
                        JOptionPane.ERROR_MESSAGE);
                return;
            }

            // Eliminar de base de datos
            CTabla tabla = new CTabla();
            boolean exito = tabla.EliminarConValidaciones(tablaSelec, metadatos, valorId);

            if (exito) {
                JOptionPane.showMessageDialog(this,
                        "Registro eliminado exitosamente",
                        "Éxito",
                        JOptionPane.INFORMATION_MESSAGE);

                // Actualizar tabla y resetear estado
                tabla.Mostrar(tablaQ, tablaSelec);
                cancelarOperacion();
            }

        } catch (Exception e) {
            JOptionPane.showMessageDialog(this,
                    "Error al eliminar registro: " + e.getMessage(),
                    "Error",
                    JOptionPane.ERROR_MESSAGE);
        }
    }

    private void configurarCamposAutoIncrement() {
        if (panelDetalles == null) return;
        
        List<CConexion.ColumnMetadata> metadatos = panelDetalles.getMetadatosTabla();
        
        for (CConexion.ColumnMetadata metadata : metadatos) {
            if (metadata.isAutoIncrement) {
                panelDetalles.setValorCampo(metadata.columnName, "(Auto)");
            }
        }
    }
    
    private void actualizarTextosBotones() {
        switch (flag) {
            case 1: // CREAR
                crear.setText("Guardar Nuevo");
                modificar.setText("Modificar");
                borrar.setText("Eliminar");
                BtnCancel.setText("Cancelar");
                crear.setForeground(new Color(0, 150, 0)); // Verde
                modificar.setForeground(Color.BLACK);
                borrar.setForeground(Color.BLACK);
                break;
            case 2: // MODIFICAR
                crear.setText("Adicionar");
                modificar.setText("Guardar Cambios");
                borrar.setText("Eliminar");
                BtnCancel.setText("Cancelar");
                crear.setForeground(Color.BLACK);
                modificar.setForeground(new Color(0, 0, 150)); // Azul
                borrar.setForeground(Color.BLACK);
                break;
            case 3: // ELIMINAR
                crear.setText("Adicionar");
                modificar.setText("Modificar");
                borrar.setText("Confirmar Eliminación");
                BtnCancel.setText("Cancelar");
                crear.setForeground(Color.BLACK);
                modificar.setForeground(Color.BLACK);
                borrar.setForeground(new Color(150, 0, 0)); // Rojo
                break;
            default: // NORMAL
                crear.setText("Adicionar");
                modificar.setText("Modificar");
                borrar.setText("Eliminar");
                BtnCancel.setText("Cancelar");
                crear.setForeground(Color.BLACK);
                modificar.setForeground(Color.BLACK);
                borrar.setForeground(Color.BLACK);
                break;
        }
    }
    
    private void cargarProyectosPorDepartamento(String nombreDepartamento) {
        try {
            // LIMPIAR TABLA COMPLETAMENTE
            DefaultTableModel modeloLimpio = new DefaultTableModel();
            tablaQ.setModel(modeloLimpio);
            tablaQ.setRowSorter(null);
            tablaQ.repaint();
            
            // Dar tiempo para que se actualice la UI
            SwingUtilities.invokeLater(() -> {
                try {
                    CTabla tabla = new CTabla();
                    tabla.ConsultarProyectosPorDepartamento(tablaQ, nombreDepartamento);
                    contextoActual = "PROYECTOS_DEPTO";
                    LTabla.setText("Proyectos de: " + nombreDepartamento);
                    System.out.println("Proyectos cargados para: " + nombreDepartamento);
                } catch (Exception e) {
                    JOptionPane.showMessageDialog(InterfazDietas.this, "Error al cargar proyectos: " + e.getMessage());
                    e.printStackTrace();
                }
            });
            
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, "Error al cargar proyectos: " + e.getMessage());
            e.printStackTrace();
        }
    }
    

    private void cargarIngenierosPorProyecto(String nombreProyecto) {
        try {
            // LIMPIAR TABLA COMPLETAMENTE
            DefaultTableModel modeloLimpio = new DefaultTableModel();
            tablaQ.setModel(modeloLimpio);
            tablaQ.setRowSorter(null);
            tablaQ.repaint();
            
            // Dar tiempo para que se actualice la UI
            SwingUtilities.invokeLater(() -> {
                try {
                    CTabla tabla = new CTabla();
                    tabla.ConsultarIngenierosPorProyecto(tablaQ, nombreProyecto);
                    contextoActual = "INGENIEROS_PROYECTO";
                    LTabla.setText("Ingenieros de: " + nombreProyecto);
                    System.out.println("Ingenieros cargados para: " + nombreProyecto);
                } catch (Exception e) {
                    JOptionPane.showMessageDialog(InterfazDietas.this, "Error al cargar ingenieros: " + e.getMessage());
                    e.printStackTrace();
                }
            });
            
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, "Error al cargar ingenieros: " + e.getMessage());
            e.printStackTrace();
        }
    }
    
    private void cargarDatosEnPanelDetalles(int fila) {
        if (panelDetalles == null) {
            return;
        }
        
        try {
            int numColumnas = tablaQ.getColumnCount();
            String[] valores = new String[numColumnas];
            
            for (int i = 0; i < numColumnas; i++) {
                Object valor = tablaQ.getValueAt(fila, i);
                valores[i] = valor != null ? valor.toString() : "";
            }
            
            panelDetalles.establecerTodosLosValores(valores);
            
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, "Error al cargar datos: " + e.getMessage());
        }
    }
 
    private void volverATablaOriginal() {
        try {
            // LIMPIAR TABLA COMPLETAMENTE
            DefaultTableModel modeloLimpio = new DefaultTableModel();
            tablaQ.setModel(modeloLimpio);
            tablaQ.setRowSorter(null);
            tablaQ.repaint();
            
            // Dar tiempo para que se actualice la UI
            SwingUtilities.invokeLater(() -> {
                try {
                    CTabla tabla = new CTabla();
                    tabla.Mostrar(tablaQ, tablaSelec);
                    contextoActual = "TABLA_NORMAL";
                    LTabla.setText("Tabla:");
                    System.out.println("Regresando a la vista normal de la tabla: " + tablaSelec);
                } catch (Exception e) {
                    JOptionPane.showMessageDialog(InterfazDietas.this, "Error al volver a la tabla original: " + e.getMessage());
                    e.printStackTrace();
                }
            });
            
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, "Error al volver a la tabla original: " + e.getMessage());
            e.printStackTrace();
        }
    }
    
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        try {
            UIManager.setLookAndFeel( new FlatDarculaLaf());
        } catch( Exception ex ) {
            System.err.println( "Failed to initialize LaF" );
        }
        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new InterfazDietas().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton BtnCancel;
    private javax.swing.JLabel LTabla;
    private javax.swing.JButton borrar;
    private javax.swing.JButton crear;
    private javax.swing.JPanel jDetails;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanelTabla;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JComboBox<String> jTablas;
    private javax.swing.JButton modificar;
    private javax.swing.JTable tablaQ;
    // End of variables declaration//GEN-END:variables
}
